create shopping cart website as below:  Project Type: Website with Shopping Cart Frontend: React.js (preferred), plain HTML/JS acceptable Features: Add, remove, view cart, update quantities, view total, responsive layout Dataset: Static list of products (provide sample JSON) Extra: If possible, persist cart with LocalStorage Deployment Goal: Ready to deploy via Hugging Face Spaces or any static host
create shopping cart website as below:  1. Project Name: Shopping Cart Web Application  2. Brief Description: Build a responsive shopping cart system for a website. Users should be able to browse a list of products, add products to the cart, update quantities, remove products, and view the total cost dynamically.  3. Technical Requirements: Frontend: HTML, CSS, JavaScript (React.js preferred for dynamic UI)  Backend: Optional (if you want persistent cart storage with database like Node.js + Express + MongoDB or Firebase)  State Management: Context API or Redux (for React apps)  Deployment: Can be hosted on Vercel, Netlify, or Hugging Face Spaces (Gradio or Streamlit app)  4. Features (Important!) âœ… Browse product list (name, image, price, short description) âœ… Add item to cart âœ… View cart contents (items, prices in Indian Rupees, quantity) âœ… Update quantity in cart âœ… Remove item from cart âœ… Show total cost dynamically âœ… Empty the entire cart (optional) âœ… Responsive (works on mobile and desktop) âœ… Allowing to checkout with the total.  5. Data Inputs (Products): Sample data structure for products (can give it as input):  json Copy Edit [   {     "id": "1",     "name": "Wireless Headphones",     "price": 59.99,     "image_url": "https://example.com/images/headphones.jpg",     "description": "Comfortable wireless headphones with noise cancellation."   },   {     "id": "2",     "name": "Smartwatch",     "price": 149.99,     "image_url": "https://example.com/images/smartwatch.jpg",     "description": "Fitness tracking smartwatch with heart rate monitor."   } ] 6. Visual Layout (Frontend Design Suggestion) Home Page â†’ Shows products in a grid view  Cart Sidebar or Separate Page â†’ Shows added products  Navbar â†’ Should have cart icon with item count  7. User Actions (Workflows):  Action	Expected Result Click "Add to Cart" on a product	Product added to cart Click "+" or "-" button	Increase or decrease quantity Click "Remove" button	Remove product from cart View total price	Updates instantly Checkout	Redirect to "Thank you" page (optional) 8. Optional Smart Features: Save cart even if the page refreshes (LocalStorage)  User login system (basic authentication if backend exists)  Product filters (by category or price)  Product search bar  ðŸŽ¯ Example Hugging Face Input Summary Project Type: Website with Shopping Cart Frontend: React.js (preferred), plain HTML/JS acceptable Features: Add, remove, view cart, update quantities, view total, responsive layout Dataset: Static list of products (provide sample JSON) Extra: If possible, persist cart with LocalStorage Deployment Goal: Ready to deploy via Hugging Face Spaces or any static host